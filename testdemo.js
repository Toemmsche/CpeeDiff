import {TestConfig} from './test/TestConfig.js';
import {Config} from './src/Config.js';
import {GeneratedMatchEvaluation} from './test/eval/GeneratedMatchEvaluation.js';
import {QualityCpeeMatchAdapter} from './test/match_adapters/QualityCpeeMatchAdapter.js';
import {BalancedCpeeMatchAdapter} from './test/match_adapters/BalancedCpeeMatchAdapter.js';
import {FastCpeeMatchAdapter} from './test/match_adapters/FastCpeeMatchAdapter.js';

/*
const doc = xmldom.DOMImplementation.prototype.createDocument("ASDF", "s");
const root = doc.createElement("tag");
doc.appendChild(root);
root.setAttributeNS("http://example.com/ns", "ns:attr", "val");
console.log(new xmldom.XMLSerializer().serializeToString(doc));
 */

/*

Logger.enableLogging();
Logger.startTimed()
console.log(getFastStringCV("Greetings, this is a Tux".repeat(1000), "I love playing treek on my twenty Linux".repeat(1000)));
Logger.result("took " + Logger.endTimed() + "ms", this);

Logger.startTimed()
console.log(getStringCV("asdfg", "Linux"));
Logger.result("took " + Logger.endTimed() + "ms", this);
 */
/*
Logger.startTimed()
console.log(levenstein("Greetings, this is a Tux".repeat(1000), "I love playing treek on my twenty Linux".repeat(1000)));
Logger.result("took " + Logger.endTimed() + "ms", this);
 */

TestConfig.EXECUTION_OPTIONS.timeout = 30 * 1000;
TestConfig.RUN_AUTOGENERATED_TESTS = true;
Config.LOG_LEVEL = 'error';
//MatchingAlgorithmEvaluation.all().evalAll();
new GeneratedMatchEvaluation([new QualityCpeeMatchAdapter(), new BalancedCpeeMatchAdapter(), new FastCpeeMatchAdapter()]).standardAggregate();
//new DiffAlgorithmEvaluation([new FastCpeeDiffAdapter(), new BalancedCpeeDiffAdapter(), new QualityCpeeDiffAdapter, new DiffXmlAdapter(), new XmlDiffAdapter(), new XyDiffAdapter(), new XccAdapter()]).evalAll(TestConfig.MATCH_CASES_DIR);
//new GeneratedDiffEvaluation([new QualityCpeeDiffAdapter(), new BalancedCpeeDiffAdapter(), new FastCpeeDiffAdapter(), new XyDiffAdapter(), new DiffXmlAdapter(), new XccAdapter()]).flatSingle();
//DiffAlgorithmEvaluation.all().evalAll();
//new MergeAlgorithmEvaluation([new CpeeMergeAdapter()]).evalAll();

/*
const diff = new OurDiffAdapter();


for (let i = 0; i < 10; i++) {
    const gen = new TreeGenerator(new GeneratorParameters(5000, 100, 100, 15, 100));
    const r = gen.randomTree();
    const changed = gen.changeTree(r, 20).tree;
    fs.writeFileSync("A.xml", XmlFactory.serialize(r));
    fs.writeFileSync("B.xml", XmlFactory.serialize(changed));
    diff.evalCase(new DiffTestInfo(), r, changed);
}


const r = new Preprocessor().parseFromFile("A.xml");
const s = new Preprocessor().parseFromFile("B.xml");

const delta = new CpeeDiff().diff(r,s);

console.log(new DeltaTreeGenerator().deltaTree(r, delta).deepEquals(s));

 */