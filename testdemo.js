import {EvalConfig} from './src/config/EvalConfig.js';
import {DiffConfig} from './src/config/DiffConfig.js';
import {CpeeMatchAdapter} from './test/match_adapters/CpeeMatchAdapter.js';
import {GeneratedMatchingEvaluation} from './test/eval/GeneratedMatchingEvaluation.js';
import {MatchingEvaluation} from './test/eval/MatchingEvaluation.js';
import {CpeeDiffAdapter} from './test/diff_adapters/CpeeDiffAdapter.js';
import {GeneratedDiffEvaluation} from './test/eval/GeneratedDiffEvaluation.js';
import {XyDiffAdapter} from './test/diff_adapters/XyDiffAdapter.js';
import {XccAdapter} from './test/diff_adapters/XccAdapter.js';
import {CpeeDiffLocalAdapter} from './test/diff_adapters/CpeeDiffLocalAdapter.js';
import {DiffEvaluation} from './test/eval/DiffEvaluation.js';
import {DiffXmlAdapter} from './test/diff_adapters/DiffXmlAdapter.js';
import {AbstractEvaluation as MergeAlgorithmEvaluation} from './test/eval/AbstractEvaluation.js';
import {CpeeMergeAdapter} from './test/merge_adapters/CpeeMergeAdapter.js';
import {XccPatchAdapter} from './test/merge_adapters/XccPatchAdapter.js';
import {_3dmAdapter} from './test/merge_adapters/_3dmAdapter.js';
import {MergeEvaluation} from './test/eval/MergeEvaluation.js';
import {XmlDiffAdapter} from './test/diff_adapters/XmlDiffAdapter.js';

/*
const doc = xmldom.DOMImplementation.prototype.createDocument("ASDF", "s");
const root = doc.createElement("tag");
doc.appendChild(root);
root.setAttributeNS("http://example.com/ns", "ns:attr", "val");
console.log(new xmldom.XMLSerializer().serializeToString(doc));
 */

/*

Logger.enableLogging();
Logger.startTimed()
console.log(getFastStringCV("Greetings, this is a Tux".repeat(1000), "I love playing treek on my twenty Linux".repeat(1000)));
Logger.result("took " + Logger.endTimed() + "ms", this);

Logger.startTimed()
console.log(getStringCV("asdfg", "Linux"));
Logger.result("took " + Logger.endTimed() + "ms", this);
 */
/*
Logger.startTimed()
console.log(levenstein("Greetings, this is a Tux".repeat(1000), "I love playing treek on my twenty Linux".repeat(1000)));
Logger.result("took " + Logger.endTimed() + "ms", this);
 */

  EvalConfig.EXECUTION_OPTIONS.timeout = 30 * 1000;
EvalConfig.RUN_AUTOGENERATED_TESTS = true;
DiffConfig.LOG_LEVEL = 'all';

//new MatchingEvaluation([ new CpeeMatchAdapter("quality"), new CpeeMatchAdapter('balanced'), new CpeeMatchAdapter('fast')]).evalAll(EvalConfig.MATCH_CASES_DIR);
//new GeneratedMatchingEvaluation([new CpeeMatchAdapter('quality'), new CpeeMatchAdapter('balanced'), new CpeeMatchAdapter('fast')]).average(false, false);
//DiffEvaluation.all().evalAll();
//GeneratedDiffEvaluation.all().average(false, false);


//new GeneratedDiffEvaluation([new CpeeDiffAdapter('quality'), new XccAdapter()]).single(false, false);
//new DiffEvaluation([new CpeeDiffAdapter(('quality')), new XccAdapter()]).evalAll();

new MergeEvaluation([new CpeeMergeAdapter(), new XccPatchAdapter(), new _3dmAdapter()]).evalAll(EvalConfig.MERGE_CASES_DIR );

/*
const diff = new OurDiffAdapter();


for (let i = 0; i < 10; i++) {
    const gen = new TreeGenerator(new GeneratorParameters(5000, 100, 100, 15, 100));
    const r = gen.randomTree();
    const changed = gen.changeTree(r, 20).tree;
    fs.writeFileSync("A.xml", XmlFactory.serialize(r));
    fs.writeFileSync("B.xml", XmlFactory.serialize(changed));
    diff.evalCase(new DiffTestInfo(), r, changed);
}


const r = new Preprocessor().fromFile("A.xml");
const s = new Preprocessor().fromFile("B.xml");

const delta = new CpeeDiff().diff(r,s);

console.log(new DeltaTreeGenerator().deltaTree(r, delta).deepEquals(s));

 */