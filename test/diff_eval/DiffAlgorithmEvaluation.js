/*
    Copyright 2021 Tom Papke

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

import {TestConfig} from "../TestConfig.js";
import {Preprocessor} from "../../src/io/Preprocessor.js";
import * as fs from "fs";
import {TreeGenerator} from "../../src/gen/TreeGenerator.js";
import {GeneratorParameters} from "../../src/gen/GeneratorParameters.js";
import {DiffTestInfo} from "./DiffTestInfo.js";
import {MarkDownFactory} from "../util/MarkDownFactory.js";
import {CpeeDiffAdapter} from "./CpeeDiffAdapter.js";
import {XmlDiffAdapter} from "./XmlDiffAdapter.js";
import {DiffXmlAdapter} from "./DiffXmlAdapter.js";
import {DeltaJsAdapter} from "./DeltaJsAdapter.js";
import {XccAdapter} from "./XccAdapter.js";
import {UnixDiffAdapter} from "./UnixDiffAdapter.js";
import {ChangeParameters} from "../../src/gen/ChangeParameters.js";
import {XyDiffAdapter} from "./XyDiffAdapter.js";
import {Logger} from "../../Logger.js";
import {DirectoryScraper} from "../util/DirectoryScraper.js";
import {CpeeDiffLocalAdapter} from "./CpeeDiffLocalAdapter.js";

export class DiffAlgorithmEvaluation {

    adapters;

    constructor(adapters = []) {
        this.adapters = adapters;
    }

    static all() {
        let adapters = [new XyDiffAdapter(), new XmlDiffAdapter(), new DiffXmlAdapter(), new DeltaJsAdapter(), new XccAdapter(), new UnixDiffAdapter()];
        adapters = adapters.filter(a => fs.existsSync(a.pathPrefix + "/" + TestConfig.RUN_SCRIPT_FILENAME));
        adapters.unshift(new CpeeDiffAdapter());
        return new DiffAlgorithmEvaluation(adapters);
    }

    static fast() {
        let adapters = [new XyDiffAdapter(), new DeltaJsAdapter(), new XccAdapter(), new UnixDiffAdapter()];
        adapters = adapters.filter(a => fs.existsSync(a.pathPrefix + "/" + TestConfig.RUN_SCRIPT_FILENAME));
        adapters.unshift(new CpeeDiffAdapter());
        return new DiffAlgorithmEvaluation(adapters);
    }

    evalAll(rootDir = TestConfig.DIFF_CASES_DIR) {
        Logger.info("Using " + rootDir + " to evaluate diff algorithms", this);

        const resultsPerAdapter = new Map();
        const resultsPerTest = new Map();
        for (const adapter of this.adapters) {
            resultsPerAdapter.set(adapter, []);
        }

        const parser = new Preprocessor();

        //collect all directories organized as
        const caseDirs = DirectoryScraper.scrape(rootDir);
        for(const testCase of caseDirs) {
            let oldTree;
            let newTree;
            let testInfo;

            if (testCase.includes("gen_")) {
                //skip if autogenerated tests are turned off or no parameters could be found
                if (!TestConfig.RUN_AUTOGENERATED_TESTS || !fs.existsSync(testCase + "/" + TestConfig.GEN_PARAMS_FILENAME)) {
                    return;
                }
                const genParamsJson = fs.readFileSync(testCase + "/" + TestConfig.GEN_PARAMS_FILENAME).toString();
                const genParams = Object.assign(new GeneratorParameters(), JSON.parse(genParamsJson));

                let changeParams = new ChangeParameters();
                //change parameters are optional
                if (fs.existsSync(testCase + "/" + TestConfig.CHANGE_PARAMS_FILENAME)) {
                    const changeParamsJson = fs.readFileSync(testCase + "/" + TestConfig.CHANGE_PARAMS_FILENAME).toString();
                    changeParams = Object.assign(changeParams, JSON.parse(changeParamsJson));
                }
                const treeGen = new TreeGenerator(genParams);

                switch (testCase) {
                    case "gen_totally_different": {
                        Logger.info("Generating two unrelated process trees", this);
                        oldTree = treeGen.randomTree();
                        newTree = treeGen.randomTree();
                        testInfo = new DiffTestInfo(testCase, Math.max(newTree.size(), oldTree.size()));
                        break;
                    }
                    default: {
                        //TODO
                        oldTree = treeGen.randomTree();
                        if (testCase === "gen_leaves_only_shuffled") {
                            oldTree = treeGen.randomLeavesOnly();
                        }
                        const changedInfo = treeGen.changeTree(oldTree, changeParams);
                        newTree = changedInfo.tree;
                        testInfo = changedInfo.info;
                        break;
                    }
                }
                testInfo.name = testCase;
            } else {
                fs.readdirSync(testCase).forEach((file) => {
                        const content = fs.readFileSync(testCase + "/" + file).toString();
                        if (file === TestConfig.NEW_TREE_FILENAME) {
                            newTree = parser.parseWithMetadata(content);
                        } else if (file === TestConfig.OLD_TREE_FILENAME) {
                            oldTree = parser.parseWithMetadata(content);
                        } else if (file === TestConfig.DIFF_INFO_FILENAME) {
                            testInfo = Object.assign(new DiffTestInfo(), JSON.parse(content));
                        }
                    }
                );
                if (oldTree == null || newTree == null) {
                    //test case is incomplete => skip
                    Logger.warn("Skip case " + testCase + " due to missing files", this);
                    return;
                }
                if (testInfo == null) {
                    testInfo = new DiffTestInfo();
                }
                testInfo.name = testCase;
                testInfo.maxSize = Math.max(oldTree.size(), newTree.size());
            }

            resultsPerTest.set(testInfo, []);
            for (const adapter of this.adapters) {
                Logger.info("Running diff case " + testInfo.name + " for " + adapter.displayName + "...", this);

                const result = adapter.evalCase(testInfo, oldTree, newTree);
                resultsPerAdapter.get(adapter).push(result);
                resultsPerTest.get(testInfo).push(result);
            }
        }

        //TODO aggregate metrics
        for (const [testInfo, results] of resultsPerTest) {
            Logger.result("Results for case " + testInfo.name, this);
            Logger.result(testInfo, this);
            Logger.result("\n" + MarkDownFactory.tabularize(results), this);
        }
    }


}

